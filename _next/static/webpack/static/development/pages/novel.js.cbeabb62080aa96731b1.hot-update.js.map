{"version":3,"file":"static/webpack/static\\development\\pages\\novel.js.cbeabb62080aa96731b1.hot-update.js","sources":["webpack:///./pages/novel.js"],"sourcesContent":["import {\n  useEffect, useState, useCallback, useRef, useMemo,\n  forwardRef,\n  createElement as h\n} from 'react'\n\nconst ChapterTitle = ({ title, titleStyle }) => {\n  return h('h4', {\n    style: titleStyle\n  }, title)\n}\n\n\nconst Paragraph = ({ paragraph, style }) => {\n  return h('div', { style }, paragraph.content)\n}\n\nconst Novel = ({ pages, marginTop, viewportHeight, appStyle, titleStyle, paragraphStyle }) => {\n  const [ index, setIndex ] = useState(0)\n  const ref = useRef(), prevRef = useRef()\n  const animateStatus = useMemo(() => ({ playing: false }), [])\n\n  const\n    prev = pages[index - 1],\n    next = pages[index + 1],\n    page = pages[index]\n\n  const onClick = useCallback(({ clientX }) => {\n    if(animateStatus.playing) return\n    const newIndex = Math.max(0,\n      Math.min(pages.length - 1,\n        index + (clientX > 187 ? 1 : -1)\n      )\n    )\n    if(index > newIndex){\n      animateStatus.playing = true\n      const am = prevRef.current.animate(\n        { transform: [ 'skewY(-90deg) scaleX(0)', 'skewY(0deg) scaleX(1)' ] }\n      , { duration: 1e3,\n        easing: 'ease-out'\n      })\n      \n      am.onfinish = e => {\n        animateStatus.playing = false\n        setIndex(newIndex)\n      }\n    }\n    else if(index < newIndex){\n      animateStatus.playing = true\n      const am = ref.current.animate(\n        { transform: [ 'skewY(0deg) scaleX(1)', 'skewY(-90deg) scaleX(0)' ] }\n      , { duration: 1e3,\n        easing: 'ease-in'\n      })\n      \n      am.onfinish = e => {\n        animateStatus.playing = false\n        setIndex(newIndex)\n      }\n    }\n    else{\n      alert('first or last')\n    }\n  }, [ index ])\n\n  const pageProps = { marginTop, viewportHeight, appStyle, titleStyle, paragraphStyle }\n  return h('div', {\n    onClick,\n    style: {\n      position: 'relative',\n      width: appStyle.width,\n      height: appStyle.height,\n      overflow: 'hidden'\n    }\n  },\n    h(Page, { transform: '', page: next, ...pageProps }),\n    h(Page, { ref, transform: `scaleX(1) skewY(0deg)`, page, ...pageProps }),\n    h(Page, { ref: prevRef, transform: `scaleX(0) skewY(-90deg)`, page: prev, ...pageProps }),\n    )\n}\n\nconst Page = forwardRef(({ transform, page, isPrev, isNext, marginTop, viewportHeight, appStyle, titleStyle, paragraphStyle }, ref) => {\n  if(!page) return null\n\n  const style = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: appStyle.width,\n    height: viewportHeight,\n    overflow: 'hidden',\n    willChange: 'transform',\n    background: '#ebe1c6',\n    transformOrigin: 'left top',\n    outline: 'solid 1px #000',\n    transform\n  }\n  return h('div', { ref, style },\n    h('div', { style: { transform: `translate(0, ${ page.offset }px)` } },\n      page.paragraphs.map(p => p.type === 'title'\n        ? h(ChapterTitle, { key: p.data.key, title: chapter.title, titleStyle })\n        : h(Paragraph, { key: p.data.key, paragraph: p.data, style: paragraphStyle })\n      )\n    )\n  )\n})\n\nconst Prerender = ({ chapter, appStyle, titleStyle, paragraphStyle, viewportHeight, setPages }) => {\n  const ref = useRef()\n  useEffect(() => {\n    if(viewportHeight){\n      const wrapper = ref.current, titleHeight = wrapper.firstChild.getBoundingClientRect().height\n      const pages = [\n        {\n          paragraphs: [ { type: 'title', data: { key: 'title_' + Math.random(), content: chapter.title } } ],\n          height: titleHeight,\n          offset: 0\n        }\n      ]\n      const { length } = wrapper.children\n      let index = 1, page = pages[0]\n      while(index < length){\n        const pHeight = wrapper.children[index].getBoundingClientRect().height\n        const para = {\n          type: 'paragraph',\n          data: chapter.paragraphs[index - 1]\n        }\n        if(page.height + page.offset < viewportHeight){\n          page.height += pHeight\n          page.paragraphs.push(para)\n          \n          if(page.height + page.offset > viewportHeight){\n            page = {\n              paragraphs: [ para ],\n              height: pHeight,\n              offset: viewportHeight - page.height - page.offset\n            }\n            pages.push(page)\n          }\n        }\n        else{\n          page = {\n            paragraphs: [ para ],\n            height: pHeight,\n            offset: 0\n          }\n          pages.push(page)\n        }\n        index ++\n      }\n      setPages(pages)\n    }\n  }, [ chapter, viewportHeight ])\n  console.log(chapter)\n  return h('div', { ref, style: { position: 'absolute', width: appStyle.width, transform: 'translateX(-750px)' } },\n    h(ChapterTitle, { title: chapter.title, titleStyle }),\n    chapter.paragraphs.map(paragraph => h(Paragraph, { key: paragraph.key, paragraph, style: paragraphStyle }))\n  )\n}\n\nconst appStyle = {\n  width: 375,\n  height: 800,\n  fontSize: 18,\n  lineHeight: '32px',\n  backgroundColor: '#ccc'\n}\n\nconst NovelViewer = ({ chapter }) => {\n  const [ pages, setPages ] = useState(null)\n  const [ marginTop, setMarginTop ] = useState(0)\n  const [ viewportHeight, setViewportHeight ] = useState(0)\n  const [ titleStyle, setTitleStyle ] = useState(null)\n  const [ paragraphStyle, setParagraphStyle ] = useState(null)\n  const viewer = useRef()\n\n  useEffect(() => {\n    const lineHeight = parseFloat(appStyle.lineHeight)\n    const viewportHeight = Math.floor(appStyle.height - lineHeight * 2 - appStyle.height % lineHeight)\n    const marginTop = Math.floor((appStyle.height - viewportHeight) * .5)\n\n    setTitleStyle({\n      fontSize: appStyle.fontSize * 2,\n      margin: 0,\n      lineHeight: lineHeight * 2 + 'px',\n      padding: `0 ${appStyle.fontSize}px ${ lineHeight }px`\n    })\n    setParagraphStyle({\n      padding: `0 ${appStyle.fontSize}px`,\n      boxSizing: 'border-box'\n    })\n    setMarginTop(marginTop)\n    setViewportHeight(viewportHeight)\n  }, [ marginTop, viewportHeight ])\n\n  return <div ref={viewer} style={appStyle}>{\n    h(Prerender, { chapter, titleStyle, viewportHeight, setPages, appStyle, paragraphStyle })\n  }{\n    pages ? h(Novel, {\n      pages,\n      appStyle,\n      titleStyle,\n      paragraphStyle,\n      marginTop,\n      viewportHeight\n    }) : null\n  }</div>\n}\n\nexport default NovelViewer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAasourceRoot":""}